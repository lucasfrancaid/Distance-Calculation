{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\Lucas\\\\desktop\\\\DistanceCalculation\\\\web\\\\src\\\\components\\\\DistanceForm\\\\places.js\";\nimport React from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setQuery = query => {\n      this.setState({\n        query\n      });\n    };\n\n    this.handleAutocompleteSelect = async query => {\n      const results = await geocodeByAddress(query);\n      const coordinates = await getLatLng(results[0]);\n      this.props.setApp({\n        coordinates\n      });\n      this.props.setApp({\n        placeData: results[0]\n      });\n    };\n\n    this.state = {\n      query: ''\n    };\n  } // set query to find Place data\n\n\n  render() {\n    return React.createElement(PlacesAutocomplete, {\n      value: this.state.query,\n      onChange: this.setQuery,\n      onSelect: this.handleAutocompleteSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"input\", Object.assign({\n      style: {\n        height: '40px',\n        width: '100%',\n        fontSize: '16px'\n      }\n    }, getInputProps({\n      placeholder: 'Search Places ...',\n      className: 'location-search-input'\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"autocomplete-dropdown-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, loading && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Loading...\"), suggestions.map(suggestion => {\n      const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n      const style = suggestion.active ? {\n        backgroundColor: '#fafafa',\n        cursor: 'pointer'\n      } : {\n        backgroundColor: '#ffffff',\n        cursor: 'pointer'\n      };\n      return React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n        className,\n        style\n      }), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, suggestion.description));\n    }))));\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["C:/users/Lucas/desktop/DistanceCalculation/web/src/components/DistanceForm/places.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","Search","Component","constructor","props","setQuery","query","setState","handleAutocompleteSelect","results","coordinates","setApp","placeData","state","render","getInputProps","suggestions","getSuggestionItemProps","loading","height","width","fontSize","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,IAA6BC,gBAA7B,EAA+CC,SAA/C,QAAgE,2BAAhE;;AAEA,MAAMC,MAAN,SAAqBJ,KAAK,CAACK,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAQvBC,QARuB,GAQZC,KAAK,IAAI;AAChB,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd;AACH,KAVsB;;AAAA,SAevBE,wBAfuB,GAeI,MAAMF,KAAN,IAAe;AACtC,YAAMG,OAAO,GAAG,MAAMV,gBAAgB,CAACO,KAAD,CAAtC;AACA,YAAMI,WAAW,GAAG,MAAMV,SAAS,CAACS,OAAO,CAAC,CAAD,CAAR,CAAnC;AACA,WAAKL,KAAL,CAAWO,MAAX,CAAkB;AAAED,QAAAA;AAAF,OAAlB;AACA,WAAKN,KAAL,CAAWO,MAAX,CAAkB;AAAEC,QAAAA,SAAS,EAAEH,OAAO,CAAC,CAAD;AAApB,OAAlB;AACH,KApBsB;;AAEf,SAAKI,KAAL,GAAa;AACTP,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH,GANgC,CAQrC;;;AAeAQ,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,kBAAD;AACA,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWP,KADlB;AAEA,MAAA,QAAQ,EAAE,KAAKD,QAFf;AAGA,MAAA,QAAQ,EAAE,KAAKG,wBAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKC,CAAC;AAAEO,MAAAA,aAAF;AAAiBC,MAAAA,WAAjB;AAA8BC,MAAAA,sBAA9B;AAAsDC,MAAAA;AAAtD,KAAD,KACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,KAAK,EAAE,MAAzB;AAAiCC,QAAAA,QAAQ,EAAE;AAA3C;AADT,OAEMN,aAAa,CAAC;AAChBO,MAAAA,WAAW,EAAE,mBADG;AAEhBC,MAAAA,SAAS,EAAE;AAFK,KAAD,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,EAQE;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGL,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADd,EAEGF,WAAW,CAACQ,GAAZ,CAAgBC,UAAU,IAAI;AAC7B,YAAMF,SAAS,GAAGE,UAAU,CAACC,MAAX,GACd,yBADc,GAEd,iBAFJ,CAD6B,CAI7B;;AACA,YAAMC,KAAK,GAAGF,UAAU,CAACC,MAAX,GACV;AAAEE,QAAAA,eAAe,EAAE,SAAnB;AAA8BC,QAAAA,MAAM,EAAE;AAAtC,OADU,GAEV;AAAED,QAAAA,eAAe,EAAE,SAAnB;AAA8BC,QAAAA,MAAM,EAAE;AAAtC,OAFJ;AAGA,aACE,6CACMZ,sBAAsB,CAACQ,UAAD,EAAa;AACrCF,QAAAA,SADqC;AAErCI,QAAAA;AAFqC,OAAb,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOF,UAAU,CAACK,WAAlB,CANF,CADF;AAUD,KAlBA,CAFH,CARF,CANA,CADJ;AAyCH;;AAjEoC;;AAsErC,eAAe7B,MAAf","sourcesContent":["import React from 'react'\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\r\n\r\nclass Search extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            query: ''\r\n        }\r\n    }\r\n\r\n// set query to find Place data\r\nsetQuery = query => {\r\n    this.setState({ query })\r\n}\r\n\r\n// send query to find Place data\r\n// use Place data to get coordinates\r\n// update state with coordinates and Place data\r\nhandleAutocompleteSelect = async query => {\r\n    const results = await geocodeByAddress(query)\r\n    const coordinates = await getLatLng(results[0])\r\n    this.props.setApp({ coordinates })\r\n    this.props.setApp({ placeData: results[0] })\r\n}\r\n\r\nrender() {\r\n    return (\r\n        <PlacesAutocomplete\r\n        value={this.state.query}\r\n        onChange={this.setQuery}\r\n        onSelect={this.handleAutocompleteSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n        <div>\r\n          <input\r\n            style={{ height: '40px', width: '100%', fontSize: '16px' }}\r\n            {...getInputProps({\r\n              placeholder: 'Search Places ...',\r\n              className: 'location-search-input',\r\n            })}\r\n          />\r\n          <div className=\"autocomplete-dropdown-container\">\r\n            {loading && <div>Loading...</div>}\r\n            {suggestions.map(suggestion => {\r\n              const className = suggestion.active\r\n                ? 'suggestion-item--active'\r\n                : 'suggestion-item';\r\n              // inline style for demonstration purpose\r\n              const style = suggestion.active\r\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n              return (\r\n                <div\r\n                  {...getSuggestionItemProps(suggestion, {\r\n                    className,\r\n                    style,\r\n                  })}\r\n                >\r\n                  <span>{suggestion.description}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n      </PlacesAutocomplete>\r\n    )\r\n}\r\n\r\n}\r\n\r\n\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}