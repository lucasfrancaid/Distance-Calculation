{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\Lucas\\\\Desktop\\\\DistanceCalculation\\\\web\\\\src\\\\components\\\\DistanceForm\\\\places.js\";\nimport React from 'react';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete'; //import useOnclickOutside from 'react-cool-onclickoutside';\n\nconst PlacesAutocomplete = () => {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      /* Define search scope here */\n    },\n    debounce: 300\n  }); //const registerRef = useOnclickOutside(() => {\n  // When user clicks outside of the component, we can dismiss\n  // the searched suggestions by calling this method\n  //  clearSuggestions();\n  //});\n\n  const handleInput = e => {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n\n  const handleSelect = ({\n    description\n  }) => () => {\n    // When user selects a place, we can replace the keyword without request data from API\n    // by setting the second parameter as \"false\"\n    setValue(description, false);\n    clearSuggestions(); // Get latitude and longitude via utility functions\n\n    getGeocode({\n      address: description\n    }).then(results => getLatLng(results[0])).then(({\n      lat,\n      lng\n    }) => {\n      console.log('Coordinates: ', {\n        lat,\n        lng\n      });\n    }).catch(error => {\n      console.log('Error: ', error);\n    });\n  };\n\n  const renderSuggestions = () => data.map(suggestion => {\n    const {\n      id,\n      structured_formatting: {\n        main_text,\n        secondary_text\n      }\n    } = suggestion;\n    return React.createElement(\"li\", {\n      key: id,\n      onClick: handleSelect(suggestion),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, main_text), \" \", React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, secondary_text));\n  });\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"origins\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Origin\"), React.createElement(\"input\", {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: \"Where are you going?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, renderSuggestions()));\n};\n\nexport default PlacesAutocomplete;","map":{"version":3,"sources":["C:/users/Lucas/Desktop/DistanceCalculation/web/src/components/DistanceForm/places.js"],"names":["React","usePlacesAutocomplete","getGeocode","getLatLng","PlacesAutocomplete","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","debounce","handleInput","e","target","handleSelect","description","address","then","results","lat","lng","console","log","catch","error","renderSuggestions","map","suggestion","id","structured_formatting","main_text","secondary_text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,IAAgCC,UAAhC,EAA4CC,SAA5C,QAA6D,yBAA7D,C,CACA;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAHT;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFV,qBAAqB,CAAC;AACxBW,IAAAA,cAAc,EAAE;AAAE;AAAF,KADQ;AAExBC,IAAAA,QAAQ,EAAE;AAFc,GAAD,CANzB,CAD+B,CAY/B;AACE;AACA;AACF;AACA;;AAEA,QAAMC,WAAW,GAAGC,CAAC,IAAI;AACvB;AACAL,IAAAA,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASV,KAAV,CAAR;AACD,GAHD;;AAKA,QAAMW,YAAY,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAqB,MAAM;AAC9C;AACA;AACAR,IAAAA,QAAQ,CAACQ,WAAD,EAAc,KAAd,CAAR;AACAP,IAAAA,gBAAgB,GAJ8B,CAM9C;;AACAT,IAAAA,UAAU,CAAC;AAAEiB,MAAAA,OAAO,EAAED;AAAX,KAAD,CAAV,CACGE,IADH,CACQC,OAAO,IAAIlB,SAAS,CAACkB,OAAO,CAAC,CAAD,CAAR,CAD5B,EAEGD,IAFH,CAEQ,CAAC;AAAEE,MAAAA,GAAF;AAAOC,MAAAA;AAAP,KAAD,KAAkB;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B;AAAEH,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAA7B;AACD,KAJH,EAIKG,KAJL,CAIWC,KAAK,IAAI;AAChBH,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,KAAvB;AACD,KANH;AAOD,GAdD;;AAgBA,QAAMC,iBAAiB,GAAG,MACxBnB,IAAI,CAACoB,GAAL,CAASC,UAAU,IAAI;AACrB,UAAM;AACJC,MAAAA,EADI;AAEJC,MAAAA,qBAAqB,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb;AAFnB,QAGFJ,UAHJ;AAKA,WACE;AACE,MAAA,GAAG,EAAEC,EADP;AAEE,MAAA,OAAO,EAAEd,YAAY,CAACa,UAAD,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASG,SAAT,CAJF,OAI+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQC,cAAR,CAJ/B,CADF;AAQD,GAdD,CADF;;AAiBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAO,IAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAEE;AACE,IAAA,KAAK,EAAE5B,KADT;AAEE,IAAA,QAAQ,EAAEQ,WAFZ;AAGE,IAAA,QAAQ,EAAE,CAACT,KAHb;AAIE,IAAA,WAAW,EAAC,sBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKuB,iBAAiB,EAAtB,CATF,CADF;AAaD,CArED;;AAuEA,eAAexB,kBAAf","sourcesContent":["import React from 'react';\r\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\r\n//import useOnclickOutside from 'react-cool-onclickoutside';\r\n\r\nconst PlacesAutocomplete = () => {\r\n  const {\r\n    ready,\r\n    value,\r\n    suggestions: { status, data },\r\n    setValue,\r\n    clearSuggestions\r\n  } = usePlacesAutocomplete({\r\n    requestOptions: { /* Define search scope here */ },\r\n    debounce: 300\r\n  });\r\n\r\n  //const registerRef = useOnclickOutside(() => {\r\n    // When user clicks outside of the component, we can dismiss\r\n    // the searched suggestions by calling this method\r\n  //  clearSuggestions();\r\n  //});\r\n\r\n  const handleInput = e => {\r\n    // Update the keyword of the input element\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleSelect = ({ description }) => () => {\r\n    // When user selects a place, we can replace the keyword without request data from API\r\n    // by setting the second parameter as \"false\"\r\n    setValue(description, false);\r\n    clearSuggestions();\r\n\r\n    // Get latitude and longitude via utility functions\r\n    getGeocode({ address: description })\r\n      .then(results => getLatLng(results[0]))\r\n      .then(({ lat, lng }) => {\r\n        console.log('Coordinates: ', { lat, lng });\r\n      }).catch(error => {\r\n        console.log('Error: ', error)\r\n      });\r\n  };\r\n\r\n  const renderSuggestions = () =>\r\n    data.map(suggestion => {\r\n      const {\r\n        id,\r\n        structured_formatting: { main_text, secondary_text }\r\n      } = suggestion;\r\n\r\n      return (\r\n        <li\r\n          key={id}\r\n          onClick={handleSelect(suggestion)}\r\n        >\r\n          <strong>{main_text}</strong> <small>{secondary_text}</small>\r\n        </li>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <div>\r\n    <label htmlFor=\"origins\">Origin</label>\r\n      <input\r\n        value={value}\r\n        onChange={handleInput}\r\n        disabled={!ready}\r\n        placeholder=\"Where are you going?\"\r\n      />\r\n      {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\r\n      <ul>{renderSuggestions()}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlacesAutocomplete;"]},"metadata":{},"sourceType":"module"}