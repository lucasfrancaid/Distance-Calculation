{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\Lucas\\\\desktop\\\\DistanceCalculation\\\\web\\\\src\\\\components\\\\DistanceForm\\\\places.js\";\nimport React, { useState } from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nfunction Search() {\n  const [query, setQuery] = useState('');\n  const [coordinates, setCoordinates] = useState('');\n  const [placeData, setPlaceData] = useState('');\n  /*    constructor(props) {\r\n          super(props)\r\n          this.state = {\r\n              query: ''\r\n          }\r\n      }\r\n  \r\n  // set query to find Place data\r\n  setQuery = query => {\r\n      this.setState({ query })\r\n  }\r\n  */\n  // send query to find Place data\n  // use Place data to get coordinates\n  // update state with coordinates and Place data\n\n  let handleAutocompleteSelect = async query => {\n    const results = await geocodeByAddress(query);\n    const coordinates = await getLatLng(results[0]);\n    setCoordinates({\n      coordinates\n    });\n    setPlaceData({\n      placeData: results[0]\n    });\n  }; //render() {\n\n\n  return React.createElement(PlacesAutocomplete, {\n    value: query,\n    onChange: e => setQuery(e.target.value),\n    onSelect: handleAutocompleteSelect(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({\n    style: {\n      height: '40px',\n      width: '100%',\n      fontSize: '16px'\n    }\n  }, getInputProps({\n    placeholder: 'Search Places ...',\n    className: 'location-search-input'\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"autocomplete-dropdown-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, loading && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Loading...\"), suggestions.map(suggestion => {\n    const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n    const style = suggestion.active ? {\n      backgroundColor: '#fafafa',\n      cursor: 'pointer'\n    } : {\n      backgroundColor: '#ffffff',\n      cursor: 'pointer'\n    };\n    return React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n      className,\n      style\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, suggestion.description));\n  }))));\n} //}\n\n\nexport default Search;","map":{"version":3,"sources":["C:/users/Lucas/desktop/DistanceCalculation/web/src/components/DistanceForm/places.js"],"names":["React","useState","PlacesAutocomplete","geocodeByAddress","getLatLng","Search","query","setQuery","coordinates","setCoordinates","placeData","setPlaceData","handleAutocompleteSelect","results","e","target","value","getInputProps","suggestions","getSuggestionItemProps","loading","height","width","fontSize","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,kBAAP,IAA6BC,gBAA7B,EAA+CC,SAA/C,QAAgE,2BAAhE;;AAEA,SAASC,MAAT,GAAkB;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACF;;;;;;;;;;;;AAYA;AACA;AACA;;AACA,MAAIW,wBAAwB,GAAG,MAAMN,KAAN,IAAe;AAC1C,UAAMO,OAAO,GAAG,MAAMV,gBAAgB,CAACG,KAAD,CAAtC;AACA,UAAME,WAAW,GAAG,MAAMJ,SAAS,CAACS,OAAO,CAAC,CAAD,CAAR,CAAnC;AACAJ,IAAAA,cAAc,CAAC;AAAED,MAAAA;AAAF,KAAD,CAAd;AACAG,IAAAA,YAAY,CAAC;AAAED,MAAAA,SAAS,EAAEG,OAAO,CAAC,CAAD;AAApB,KAAD,CAAZ;AACH,GALD,CAnBkB,CA0BlB;;;AACI,SACI,oBAAC,kBAAD;AACA,IAAA,KAAK,EAAEP,KADP;AAEA,IAAA,QAAQ,EAAEQ,CAAC,IAAIP,QAAQ,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAFvB;AAGA,IAAA,QAAQ,EAAEJ,wBAAwB,EAHlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKC,CAAC;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA,sBAA9B;AAAsDC,IAAAA;AAAtD,GAAD,KACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,QAAQ,EAAE;AAA3C;AADT,KAEMN,aAAa,CAAC;AAChBO,IAAAA,WAAW,EAAE,mBADG;AAEhBC,IAAAA,SAAS,EAAE;AAFK,GAAD,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAQE;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADd,EAEGF,WAAW,CAACQ,GAAZ,CAAgBC,UAAU,IAAI;AAC7B,UAAMF,SAAS,GAAGE,UAAU,CAACC,MAAX,GACd,yBADc,GAEd,iBAFJ,CAD6B,CAI7B;;AACA,UAAMC,KAAK,GAAGF,UAAU,CAACC,MAAX,GACV;AAAEE,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KADU,GAEV;AAAED,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KAFJ;AAGA,WACE,6CACMZ,sBAAsB,CAACQ,UAAD,EAAa;AACrCF,MAAAA,SADqC;AAErCI,MAAAA;AAFqC,KAAb,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOF,UAAU,CAACK,WAAlB,CANF,CADF;AAUD,GAlBA,CAFH,CARF,CANA,CADJ;AAyCH,C,CAED;;;AAGA,eAAe3B,MAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\r\n\r\nfunction Search() {\r\n  const [query, setQuery] = useState('')\r\n  const [coordinates, setCoordinates] = useState('')\r\n  const [placeData, setPlaceData] = useState('')\r\n/*    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            query: ''\r\n        }\r\n    }\r\n\r\n// set query to find Place data\r\nsetQuery = query => {\r\n    this.setState({ query })\r\n}\r\n*/\r\n// send query to find Place data\r\n// use Place data to get coordinates\r\n// update state with coordinates and Place data\r\nlet handleAutocompleteSelect = async query => {\r\n    const results = await geocodeByAddress(query)\r\n    const coordinates = await getLatLng(results[0])\r\n    setCoordinates({ coordinates })\r\n    setPlaceData({ placeData: results[0] })\r\n}\r\n\r\n//render() {\r\n    return (\r\n        <PlacesAutocomplete\r\n        value={query}\r\n        onChange={e => setQuery(e.target.value)}\r\n        onSelect={handleAutocompleteSelect()}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n        <div>\r\n          <input\r\n            style={{ height: '40px', width: '100%', fontSize: '16px' }}\r\n            {...getInputProps({\r\n              placeholder: 'Search Places ...',\r\n              className: 'location-search-input',\r\n            })}\r\n          />\r\n          <div className=\"autocomplete-dropdown-container\">\r\n            {loading && <div>Loading...</div>}\r\n            {suggestions.map(suggestion => {\r\n              const className = suggestion.active\r\n                ? 'suggestion-item--active'\r\n                : 'suggestion-item';\r\n              // inline style for demonstration purpose\r\n              const style = suggestion.active\r\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n              return (\r\n                <div\r\n                  {...getSuggestionItemProps(suggestion, {\r\n                    className,\r\n                    style,\r\n                  })}\r\n                >\r\n                  <span>{suggestion.description}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n      </PlacesAutocomplete>\r\n    )\r\n}\r\n\r\n//}\r\n\r\n\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}